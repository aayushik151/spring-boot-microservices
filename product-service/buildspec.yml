version: 0.2

phases:
  install:
    commands:
      - docker-compose -f ././product-service/docker-compose.yml up
      - echo Waiting for MongoDB to be ready...
      - ./wait-for-it.sh mongodb:27017 --timeout=60 --strict -- echo "MongoDB is up and running"
#      - echo "MongoDB is up and running"
#      - /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2 &
#      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
    finally:
      - echo This always runs even if the install command fails
  pre_build:
    commands:
#      - docker-compose up -d
#      - docker pull mongodb/mongodb-community-server:latest
#      - docker run --name mongodb -p 27017:27017 -d mongodb/mongodb-community-server:latest
      - echo Building the Maven project...
      - mvn clean install
      - echo Logging in to Amazon ECR...
      - aws --version
      - REPOSITORY_URI=975050119767.dkr.ecr.ap-southeast-2.amazonaws.com/programming-registry
      - echo $(aws ecr get-login-password --region ap-southeast-2 -profile test)
      - aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin $REPOSITORY_URI
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
    finally:
      - echo This always runs even if the install command fails 1
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"product-service","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo Writing image definitions file...
      # add your container name
      - DOCKER_CONTAINER_NAME=programming-registry
      - printf '[{"name":"%s","imageUri":"%s"}]' $DOCKER_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo $DOCKER_CONTAINER_NAME
      - echo printing imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
    - target/product-service-1.0-SNAPSHOT.jar
