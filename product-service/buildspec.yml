version: 0.2

phases:
  install:
    commands:
      - echo Starting Docker daemon...
      - /usr/local/bin/dockerd-entrypoint.sh &  # Start Docker daemon
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      - echo Docker daemon started successfully
  pre_build:
    commands:
      - echo Starting MongoDB container...
      - docker-compose -f ./product-service/docker-compose.yml up -d mongodb
      - echo Waiting for MongoDB to be ready...
      - ./wait-for-it.sh localhost:27017 --timeout=60 --strict -- echo "MongoDB is up and running"
      - echo Building the Maven project...
      - mvn clean install
      - echo Logging in to Amazon ECR...
      - REPOSITORY_URI=975050119767.dkr.ecr.ap-southeast-2.amazonaws.com/programming-registry
      - aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin $REPOSITORY_URI
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"product-service","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo Writing image definitions file...
      - DOCKER_CONTAINER_NAME=programming-registry
      - printf '[{"name":"%s","imageUri":"%s"}]' $DOCKER_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
    - target/product-service-1.0-SNAPSHOT.jar
